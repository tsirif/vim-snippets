###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define ${1}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
${VISUAL}${0}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${2:int }${3:i} = 0; $3 < ${1:count}; ${4:++$3}) {
	${VISUAL}${0}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet guard "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	dire = os.getcwd().split('/')[-1].upper()
	snip.rv = dire + '_' + name
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif  // $1
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet el "else .. (else)"
else {
	${VISUAL}${0}
}
endsnippet

snippet elif "else if .. (elif)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */}) {
	${2}
}
else {
	${3:/* else */}
}
endsnippet

snippet swid "switch with default .. (swid)"
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

snippet swi "switch without default .. (swi)"
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
}
endsnippet

snippet case "case .. (case)"
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
/**
 * @struct ${1/(\w+).*/$1/} ${2:TODO}
 */
typedef struct _${1:`!p
snip.rv = ''.join(map(lambda x: x.capitalize(), snip.basename.split('_'))) or "structname"`}
{
	${0:/* data */}
} $1;
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3:/*arguments*/})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3:/*arguments*/});
endsnippet

# vim:ft=snippets:
