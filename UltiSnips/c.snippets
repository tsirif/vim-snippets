priority -50

################################################################################
#                           Documentation Functions                            #
################################################################################

global !p

class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		tmp = arg.split('=')[0].split()
		self.name = tmp[-1].strip()
		self.type = ' '.join(tmp[:len(tmp)-1])

	def __str__(self):
		return self.name

	def __unicode__(self):
		return self.name

	def get_type(self):
		return self.type

	def is_kwarg(self):
		return '=' in self.arg


def get_args(arglist):
	args = [Arg(arg) for arg in arglist.split(',') if len(arg.split()) >= 2]
	return args


def format_arg(arg):
		return " * \param %s [%s] TODO" % (arg, arg.get_type())


def write_docstring_args(args, snip):
	for arg in args:
		snip += format_arg(arg)


def write_method_docstring(t, snip, argi, reti):
	"""
	Writes a function docstring with the current style.

	:param t: The values of the placeholders
	:param snip: UltiSnips.TextObjects.SnippetUtil object instance
	"""
	snip.rv = ""
	args = get_args(t[argi])
	if args:
		write_docstring_args(args, snip)
	snip += r" * \return " + t[reti] +" TODO"


def write_constructor_docstring(t, snip):
	"""
	Writes a function docstring with the current style.

	:param t: The values of the placeholders
	:param snip: UltiSnips.TextObjects.SnippetUtil object instance
	"""
	snip.rv = ""
	snip >> 1
	args = get_args(t[2])
	if args:
		snip += '/**'
		write_docstring_args(args, snip)
		snip += ' */'


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet def "#define ..."
#define ${1}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
${VISUAL}${0}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${2:int }${3:i} = 0; $3 < ${1:count}; ${4:++$3}) {
	${VISUAL}${0}
}
endsnippet

snippet guard "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	dire = os.getcwd().split('/')[-1].upper()
	snip.rv = dire + '_' + name
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif  // $1
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet el "else .. (else)"
else {
	${VISUAL}${0}
}
endsnippet

snippet elif "else if .. (elif)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */}) {
	${2}
}
else {
	${3:/* else */}
}
endsnippet

snippet swid "switch with default .. (swid)"
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

snippet swi "switch without default .. (swi)"
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
}
endsnippet

snippet case "case .. (case)"
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
/**
 * ${1/(\w+).*/$1/} ${2:TODO}
 */
typedef struct _${1:`!p
snip.rv = ''.join(map(lambda x: x.capitalize(), snip.basename.split('_'))) or "structname"`} {
	${0:/* data */}
} $1;
endsnippet

snippet enum "Enumeration"
/**
 * ${1/(\w+).*/$1/} ${2:TODO}
 */
typedef enum _${1:`!p
snip.rv = ''.join(map(lambda x: x.capitalize(), snip.basename.split('_'))) or "enumname"`} {
	${0:/* data */}
} $1;
endsnippet

snippet fun "function" b
/**
 * \details TODO
 */
${1:void} ${2:function_name}(${3:void*})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration with documentation" b
/**
 * \brief ${5:TODO}`!p write_method_docstring(t, snip, 4, 3)`
 */
${2:GPUARRAY_PUBLIC} ${3:void} ${1:function_name}(${4:void*});
$0
endsnippet

# vim:ft=snippets:
